import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const html='<h1 id="variables-let-const-var-变量声明">Variables let, const, var-变量声明<a class="anchor" href="#variables-let-const-var-变量声明"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h1>\n<h2 id="var-let-const-区别">var, let, const 区别<a class="anchor" href="#var-let-const-区别"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th></th><th>var</th><th>let</th><th>const</th></tr></thead><tbody><tr><td>变量与 window 对象绑定</td><td>✅</td><td>❌</td><td>❌</td></tr><tr><td>变量提升 (先用后声明)</td><td>✅</td><td>❌</td><td>❌</td></tr><tr><td>重复声明</td><td>✅</td><td>❌</td><td>❌</td></tr><tr><td>变量修改</td><td>✅</td><td>✅</td><td>❌ (不能用于循环体变量声明)</td></tr><tr><td>必须初始化赋值</td><td>❌</td><td>❌</td><td>✅</td></tr><tr><td>作用域</td><td>函数（闭包实现块作用域效果）</td><td>块</td><td>块</td></tr></tbody></table>\n<ul>\n<li>❗const 声明的对象，其内部值仍可修改，若要冻结对象内部值，可使用 <code>Object.freeze()</code>\n<ul>\n<li><img src="https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/C04VariablesScopeMemory-12-x62-y38.png" alt=""></li>\n</ul>\n</li>\n</ul>',frontmatter={title:"Variables let, const, var-变量声明",type:"D",topic:["Basics","Scope"],tags:["JavaScript"],Datereviewed:"2024-04-16T00:00:00.000Z",reviewed:2,difficulty:null,comment:null,aliases:["Variables let, const, var-变量声明"],DateStarted:"2022-12-02T00:00:00.000Z",DateModified:"2024-04-18T00:00:00.000Z",status:["ToUse"],"linter-yaml-title-alias":"Variables let, const, var-变量声明",category:"Programming",minutes:1,words:107},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/js/scope/variable-let-const-var-变量声明.md",url=void 0;function rawContent(){return"\n# Variables let, const, var-变量声明\n\n## var, let, const 区别\n\n|                        | var                          | let | const                       |\n| ---------------------- | ---------------------------- | --- | --------------------------- |\n| 变量与 window 对象绑定 | ✅                           | ❌  | ❌                          |\n| 变量提升 (先用后声明)  | ✅                           | ❌  | ❌                          |\n| 重复声明               | ✅                           | ❌  | ❌                          |\n| 变量修改               | ✅                           | ✅  | ❌ (不能用于循环体变量声明) |\n| 必须初始化赋值         | ❌                           | ❌  | ✅                          |\n| 作用域                 | 函数（闭包实现块作用域效果） | 块  | 块                          |\n\n- ❗const 声明的对象，其内部值仍可修改，若要冻结对象内部值，可使用 `Object.freeze()`\n  - ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/C04VariablesScopeMemory-12-x62-y38.png)\n"}function compiledContent(){return html}function getHeadings(){return[{depth:1,slug:"variables-let-const-var-变量声明",text:"Variables let, const, var-变量声明#"},{depth:2,slug:"var-let-const-区别",text:"var, let, const 区别#"}]}const Content=createComponent(((t,n,e)=>{const{layout:r,...a}=frontmatter;return a.file=file,a.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`}));export{Content,compiledContent,Content as default,file,frontmatter,getHeadings,rawContent,url};