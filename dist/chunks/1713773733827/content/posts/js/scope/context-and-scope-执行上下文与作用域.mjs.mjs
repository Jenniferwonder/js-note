import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const html='<h1 id="context-and-scope-执行上下文与作用域">Context and Scope-执行上下文与作用域<a class="anchor" href="#context-and-scope-执行上下文与作用域"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h1>\n<h2 id="scope-definition">Scope Definition<a class="anchor" href="#scope-definition"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li>context</li>\n<li>Each execution context has an associated variable object upon which all of its defined variables and functions exist.</li>\n<li>Refers to the environment where a certain variable is declared;\n<ul>\n<li>作用域：可访问变量的集合</li>\n</ul>\n</li>\n<li>Scope of a variable: Refer to the entire region of code where a certain variable can be accessed\n<ul>\n<li>作用域最大的用处就是<code>隔离变量</code>，不同作用域下同名变量不会有冲突</li>\n</ul>\n</li>\n<li>JS => Lexical scoping which is defined by the placement of functions and blocks in the code</li>\n<li>[JavaScript 深入之词法作用域和动态作用域](<a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fmqyqingfeng%2FBlog%2Fissues%2F3">https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fmqyqingfeng%2FBlog%2Fissues%2F3</a> <a href="https://github.com/mqyqingfeng/Blog/issues/3">https://github.com/mqyqingfeng/Blog/issues/3</a>)</li>\n</ul>\n<h2 id="three-types-of-scope-作用域类型">Three Types of Scope 作用域类型<a class="anchor" href="#three-types-of-scope-作用域类型"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li>Global scope 全局作用域\n<ul>\n<li>In web browsers, the global context is said to be that of the window object</li>\n<li>var</li>\n<li>created as properties and methods on the window object</li>\n</ul>\n</li>\n<li>Function scope/ Local scope 函数作用域\n<ul>\n<li>是指声明在函数内部的变量，函数的作用域在函数定义的时候就决定了</li>\n</ul>\n</li>\n<li>Block scope ES6 块级作用域\n<ul>\n<li>块作用域由<code>{ }</code>包括，if 和 for 语句里面的<code>{ }</code>也属于块作用域\n<ul>\n<li>Eg. if/ for loops</li>\n</ul>\n</li>\n<li>在块级作用域中，可通过 let 和 const 声明变量，该变量在指定块的作用域外无法被访问\n<ul>\n<li>let; const (not var)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Related:: <a href="variable-let-const-var-%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E">variable-let-const-var-变量声明</a></li>\n</ul>\n<h2 id="作用域链">作用域链<a class="anchor" href="#作用域链"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li>Identifier Lookup 标识符查找\n<ul>\n<li>Child scope can access variables in its parent scope</li>\n<li>当查找变量的时候，首先会先从当前上下文的变量对象（作用域）中查找，如果没有找到，就会从父级的执行上下文的变量对象中查找，如果还没有找到，一直找到全局上下文的变量对象，也就是全局对象。这样由多个执行上下文的变量对象构成的链表就叫做<code>作用域链</code></li>\n<li>identifiers in a parent context cannot be referenced if an identifier in the local context has the same name,</li>\n</ul>\n</li>\n<li>Scope Chain Augmentation 作用域链增强\n<ul>\n<li>The catch block in a try-catch statement</li>\n<li>A <code>with</code> statement</li>\n</ul>\n</li>\n<li>[JavaScript 深入之作用域链](<a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fmqyqingfeng%2FBlog%2Fissues%2F6">https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fmqyqingfeng%2FBlog%2Fissues%2F6</a> <a href="https://github.com/mqyqingfeng/Blog/issues/6">https://github.com/mqyqingfeng/Blog/issues/6</a>)</li>\n</ul>',frontmatter={title:"Context and Scope-执行上下文与作用域",tags:["JavaScript"],type:"D",topic:["Scope"],DateStarted:"2023-07-28T00:00:00.000Z",DateModified:"2024-04-18T00:00:00.000Z",Datereviewed:null,status:["Mature"],reviewed:2,difficulty:null,comment:null,category:"Programming",minutes:2,words:458},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/js/scope/context-and-scope-执行上下文与作用域.md",url=void 0;function rawContent(){return"\n# Context and Scope-执行上下文与作用域\n\n## Scope Definition\n\n- context\n- Each execution context has an associated variable object upon which all of its defined variables and functions exist.\n- Refers to the environment where a certain variable is declared;\n  - 作用域：可访问变量的集合\n- Scope of a variable: Refer to the entire region of code where a certain variable can be accessed\n  - 作用域最大的用处就是`隔离变量`，不同作用域下同名变量不会有冲突\n- JS => Lexical scoping which is defined by the placement of functions and blocks in the code\n- [JavaScript 深入之词法作用域和动态作用域](https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fmqyqingfeng%2FBlog%2Fissues%2F3 https://github.com/mqyqingfeng/Blog/issues/3)\n\n## Three Types of Scope 作用域类型\n\n- Global scope 全局作用域\n  - In web browsers, the global context is said to be that of the window object\n  - var\n  - created as properties and methods on the window object\n- Function scope/ Local scope 函数作用域\n  - 是指声明在函数内部的变量，函数的作用域在函数定义的时候就决定了\n- Block scope ES6 块级作用域\n  - 块作用域由`{ }`包括，if 和 for 语句里面的`{ }`也属于块作用域\n    - Eg. if/ for loops\n  - 在块级作用域中，可通过 let 和 const 声明变量，该变量在指定块的作用域外无法被访问\n    - let; const (not var)\n- Related:: [variable-let-const-var-变量声明](variable-let-const-var-变量声明)\n\n## 作用域链\n\n- Identifier Lookup 标识符查找\n  - Child scope can access variables in its parent scope\n  - 当查找变量的时候，首先会先从当前上下文的变量对象（作用域）中查找，如果没有找到，就会从父级的执行上下文的变量对象中查找，如果还没有找到，一直找到全局上下文的变量对象，也就是全局对象。这样由多个执行上下文的变量对象构成的链表就叫做`作用域链`\n  - identifiers in a parent context cannot be referenced if an identifier in the local context has the same name,\n- Scope Chain Augmentation 作用域链增强\n  - The catch block in a try-catch statement\n  - A `with` statement\n- [JavaScript 深入之作用域链](https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fmqyqingfeng%2FBlog%2Fissues%2F6 https://github.com/mqyqingfeng/Blog/issues/6)\n"}function compiledContent(){return html}function getHeadings(){return[{depth:1,slug:"context-and-scope-执行上下文与作用域",text:"Context and Scope-执行上下文与作用域#"},{depth:2,slug:"scope-definition",text:"Scope Definition#"},{depth:2,slug:"three-types-of-scope-作用域类型",text:"Three Types of Scope 作用域类型#"},{depth:2,slug:"作用域链",text:"作用域链#"}]}const Content=createComponent(((e,n,t)=>{const{layout:i,...o}=frontmatter;return o.file=file,o.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`}));export{Content,compiledContent,Content as default,file,frontmatter,getHeadings,rawContent,url};