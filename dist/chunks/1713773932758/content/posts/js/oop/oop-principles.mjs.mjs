import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const html='<h1 id="oop-principles-面向对象原则">OOP Principles-面向对象原则<a class="anchor" href="#oop-principles-面向对象原则"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h1>\n<h4 id="1-abstraction-抽象">1. Abstraction 抽象<a class="anchor" href="#1-abstraction-抽象"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<ul>\n<li>Hide the details and show the essentials</li>\n</ul>\n<h4 id="2-inheritance-继承">2. <a href="Inheritance">Inheritance</a> 继承<a class="anchor" href="#2-inheritance-继承"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h4 id="3-encapsulation-封装">3. Encapsulation 封装<a class="anchor" href="#3-encapsulation-封装"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<h4 id="4-polymorphism-多模态">4. Polymorphism 多模态<a class="anchor" href="#4-polymorphism-多模态"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<ul>\n<li>when a method has the same name but a different implementation in different classes</li>\n</ul>',frontmatter={aliases:["OOP Principles-面向对象原则"],title:"OOP Principles-面向对象原则",topic:["OOP"],tags:["JavaScript"],type:"D",DateStarted:"2023-07-03T00:00:00.000Z",DateModified:"2024-04-18T00:00:00.000Z",Datereviewed:"2024-01-29T00:00:00.000Z",difficulty:"Good",status:["ToCapture"],comment:null,reviewed:1,"linter-yaml-title-alias":"OOP Principles-面向对象原则",category:"Programming",minutes:1,words:45},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/js/oop/oop-principles.md",url=void 0;function rawContent(){return"\n# OOP Principles-面向对象原则\n\n#### 1. Abstraction 抽象\n\n- Hide the details and show the essentials\n\n#### 2. [Inheritance](Inheritance) 继承\n\n#### 3. Encapsulation 封装\n\n#### 4. Polymorphism 多模态\n\n- when a method has the same name but a different implementation in different classes\n"}function compiledContent(){return html}function getHeadings(){return[{depth:1,slug:"oop-principles-面向对象原则",text:"OOP Principles-面向对象原则#"},{depth:4,slug:"1-abstraction-抽象",text:"1. Abstraction 抽象#"},{depth:4,slug:"2-inheritance-继承",text:"2. Inheritance 继承#"},{depth:4,slug:"3-encapsulation-封装",text:"3. Encapsulation 封装#"},{depth:4,slug:"4-polymorphism-多模态",text:"4. Polymorphism 多模态#"}]}const Content=createComponent(((e,n,t)=>{const{layout:a,...i}=frontmatter;return i.file=file,i.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`}));export{Content,compiledContent,Content as default,file,frontmatter,getHeadings,rawContent,url};