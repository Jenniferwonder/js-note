import{createComponent,renderTemplate,maybeRenderHead,unescapeHTML}from"../../../../chunks/1713773016041/astro.mjs";import"kleur/colors";import"clsx";import"html-escaper";import"cssesc";const id="js/data-fetching/promise.md",collection="posts",slug="js/data-fetching/promise",body="\n# Promise\n\n## Reference\n\n- ⭐[通俗易懂的 Promise 知识点总结，检验一下你是否真的完全掌握了 Promise？ - 掘金](https://juejin.cn/post/7020335414980378655)\n  - [Promise - JavaScript | MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\n  - [Using Promises - JavaScript | MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises)\n- [你好，JavaScript 异步编程---- 理解 JavaScript 异步的美妙](https://juejin.cn/post/6844903648162480142 https://juejin.cn/post/6844903648162480142)\n- [Promise 不会？？看这里！！！史上最通俗易懂的 Promise！！！](https://juejin.cn/post/6844903607968481287 https://juejin.cn/post/6844903607968481287)\n- [当 async/await 遇上 forEach](https://link.juejin.cn?target=https%3A%2F%2Fobjcer.com%2F2017%2F10%2F12%2Fasync-await-with-forEach%2F https://objcer.com/2017/10/12/async-await-with-forEach/)\n- [Promise 必知必会（十道题）](https://juejin.cn/post/6844903509934997511 https://juejin.cn/post/6844903509934997511)\n\n### Write a Promise\n\n- ⭐[Promises/A+](https://promisesaplus.com/)\n  - 🛠️[Conformant Promises/A+ Implementations](https://promisesaplus.com/implementations)\n  - 🛠️[Promises/A+ · GitHub](https://github.com/promises-aplus)\n- 🚀[手写 Promise：实现符合 Promises/A+规范的 Promise - 掘金](https://juejin.cn/post/7274887531271012388#heading-13)\n- 🚀[手写 Promise 核心代码 - JavaScript 前端 Web 工程师\\_哔哩哔哩\\_bilibili](https://www.bilibili.com/video/BV1RR4y1p7my/?vd_source=be278a4cfd00a5f72dcf153eaca79333)\n  - [手把手一行一行代码教你“手写 Promise“，完美通过 Promises/A+ 官方 872 个测试用例 - 掘金](https://juejin.cn/post/7043758954496655397#heading-14)\n- [Promise 实现原理（附源码）](https://juejin.cn/post/6844903665686282253 https://juejin.cn/post/6844903665686282253)\n- [100 行代码实现 Promises/A+ 规范](https://link.juejin.cn?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FqdJ0Xd8zTgtetFdlJL3P1g https://mp.weixin.qq.com/s/qdJ0Xd8zTgtetFdlJL3P1g)\n- [一起学习造轮子（一）：从零开始写一个符合 Promises/A+规范的 promise](https://juejin.cn/post/6844903617619558408#heading-34 https://juejin.cn/post/6844903617619558408#heading-34)\n- [BAT 前端经典面试问题：史上最最最详细的手写 Promise 教程](https://juejin.cn/post/6844903625769091079#heading-9 https://juejin.cn/post/6844903625769091079#heading-9)\n\n## What is a Promise?\n\n- A promise is a returned **object** to which you attach callbacks, instead of passing callbacks into a function.\n- It represents the eventual completion (or failure) of an asynchronous operation and its resulting value.\n- Promise 是一种处理异步代码（而不会陷入回调地狱）的方式。\n\n## Promise State & Result\n\n#### 3 种状态 (PromiseState)\n\n- **pending**: initial state, neither fulfilled nor rejected.\n- **fulfilled** (resolved): meaning that the operation was completed successfully.\n- **rejected**: meaning that the operation failed\n- ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/z-PromiseState-1.png) ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/z-PromiseState.png)\n\n#### 执行特点\n\n- Promise 只以`第一次为准`，第一次成功就`永久`为`fulfilled`，第一次失败就永远状态为`rejected`\n- Promise 中有 `throw` 的话，就相当于执行了`reject`\n\n```js\nlet p1 = new Promise((resolve, reject) => {\n\tresolve(成功);\n\treject(失败);\n});\nconsole.log(p1, p1);\n\nlet p2 = new Promise((resolve, reject) => {\n\treject(失败);\n\tresolve(成功);\n});\nconsole.log(p2, p2);\n\nlet p3 = new Promise((resolve, reject) => {\n\tthrow 报错;\n});\nconsole.log(p3, p3);\n```\n\n#### Pending State 特点\n\n- Promise 里没有执行`resolve`、`reject`以及`throw`的话，这个 promise 的状态也是`pending`\n- `pending`状态下的 promise 不会执行回调函数`then()`\n\n```js\nlet myPromise1 = new Promise(() => {});\nconsole.log(myPromise1 :>> , myPromise1);\nlet myPromise2 = new Promise((resolve, reject) => {\n\tlet a = 1;\n\tfor (let index = 0; index < 5; index++) {\n\t\ta++;\n\t}\n});\nconsole.log(myPromise2 :>> , myPromise2);\nmyPromise2.then(() => {\n\tconsole.log(myPromise2执行了then); // 在 Promise pending 状态下不会执行\n});\n```\n\n## Create a Promise\n\n### `new Promise()`\n\n#### 参数要求\n\n- 使用 `new Promise()` 必须输入一个执行函数，否则会报错\n\n```js\nlet myPromise0 = new Promise();\nconsole.log(myPromise0 :>> , myPromise0); // 报错：TypeError: Promise resolver undefined\n```\n\n##### Case\n\n```js\nfunction makeRequest(location) {\n\treturn new Promise((resolve, reject) => {\n\t\tconsole.log(`Making Request to ${location}`);\n\t\tif (location === Google) {\n\t\t\tresolve(Google says Hi);\n\t\t} else {\n\t\t\treject(We can only talk to Google);\n\t\t}\n\t});\n}\n```\n\n#### ⭐ 执行顺序\n\n- Promise 构造函数是同步执行的，`promise.then`  中的函数是异步执行的\n\n##### Case\n\n```js\nconst promise = new Promise((resolve, reject) => {\n\tconsole.log(1);\n\tresolve();\n\tconsole.log(2);\n});\npromise.then(() => {\n\tconsole.log(3);\n});\nconsole.log(4);\n```\n\n##### Output\n\n```shell\n1\n2\n4\n3\n```\n\n### `Promise.resolve()`\n\n将现有对象转为 Promise 对象\n\n```js\nPromise.resolve(foo);\n// 等价于\nnew Promise((resolve) => resolve(foo));\n```\n\n#### 参数的四种情况\n\n1. 如果参数是 `Promise` 实例\n   - 那么 `Promise.resolve()` 将不做任何修改、原封不动地返回这个实例。\n2. 参数是一个 thenable (具有`then`方法的对象) 对象\n   - 会将这个对象转为 `Promise` 对象，然后就立即执行 thenable 对象的 `then`方法\n3. 参数是一个原始值，或者是一个不具有`then`方法的对象\n   - 则`Promise.resolve`方法返回一个新的  `Promise`  对象，状态为`resolved`\n4. `Promise.resolve()`方法允许调用时不带参数\n   - 直接返回一个 `resolved`状态的 `Promise` 对象。\n\n#### Example\n\n```js\nconst tick = Date.now();\nconst log = (v) => console.log(`${v} \\n Elapsed: ${Date.now() - tick}ms`);\nconst codeBlocker = () => {\n\t// Blocking\n\t// let i = 0;\n\t// while(i < 1000000000) { i++;}\n\t// return '🐷 billion loops done';\n\n\t// Async blocking\n\t// return new Promise((resolve, reject) => {\n\t// let i = 0;\n\t// while(i < 1000000000) { i++;}\n\t// resolve('🐷 billion loops done');\n\t// })\n\n\t// Non-blocking\n\treturn Promise.resolve().then((v) => {\n\t\tlet i = 0;\n\t\twhile (i < 1000000000) {\n\t\t\ti++;\n\t\t}\n\t\treturn 🐷 billion loops done;\n\t});\n};\nlog(🥪 Synchronous 1);\ncodeBlocker().then(log);\nlog(🥪 Synchronous 2);\n```\n\n### `Promise.reject()`\n\n- `Promise.reject()`方法的参数，会原封不动地作为`reject`的理由，变成后续方法的参数\n\n```js\nconst thenable = {\n\tthen(resolve, reject) {\n\t\treject(出错了);\n\t},\n};\nPromise.reject(thenable).catch((e) => {\n\tconsole.log(e === thenable);\n});\n// true\n```\n\n## Consume Promise\n\n### `Promise.prototype.then()`\n\n接收两个回调函数作为参数，均为可选参数\n\n```js\nPromise.resolve().then(onFulfilled()=>{}, onReject()={})\n```\n\n### `Promise.prototype.catch()`\n\n#### 错误捕获条件\n\n❌ 在`then`或`catch`中 `return` 一个 `new Error` 对象不会被捕获：\n`return new Error(Error!)`\n✅ 必须使用以下任一一种语法：\n\n```js\nreturn Promise.reject(new Error(error!!!));\nthrow new Error(error!!!);\n```\n\n#### 级联错误\n\n- 如果在  `catch()`  内部引发错误，则可以附加第二个  `catch()`来处理，依此类推\n\n```js\nnew Promise((resolve, reject) => {\n\tthrow new Error(错误);\n})\n\t.catch((err) => {\n\t\tthrow new Error(错误);\n\t})\n\t.catch((err) => {\n\t\tconsole.error(err);\n\t});\n```\n\n### `Promise.prototype.finally()`\n\n- 用于指定不管 Promise 对象最后状态如何，都会执行的操作。该方法是 ES2018 引入标准的\n  - 避免了同样的语句需要在`then()`和`catch()`中各写一次的情况。\n\n### Example (Consume Promise )\n\n#### Example (Promise chain)\n\n```js\n// import fetch from node-fetch;\nconst promise = fetch(https://jsonplaceholder.typicode.com/todos/1);\npromise\n\t.then((res) => res.json())\n\t.then((todo) => {\n\t\tthrow new Error(uh oh);\n\t\treturn todo;\n\t})\n\t.then((todo) => console.log(😛, todo.title)) // This line will be bypasses\n\t.catch((err) => console.error(😭, err));\nconsole.log(🥪 Synchronous);\n```\n\n#### Example (Ice-cream Shop)\n\n- [[英字] JavaScript 异步编程（Async/Await、Promise、Callback）FreeCodeCamp](https://www.bilibili.com/video/BV1g44y1z7N3/?spm_id_from=333.788.recommend_more_video.4&vd_source=be278a4cfd00a5f72dcf153eaca79333)\n- [FreeCodeCamp-Blog](https://www.freecodecamp.org/news/javascript-async-await-tutorial-learn-callbacks-promises-async-await-by-making-icecream/)\n\n##### Relationship between time and work\n\n```javascript\nlet is_shop_open = true;\nlet order = (time, work) => {\n\treturn new Promise((resolve, reject) => {\n\t\tif (is_shop_open) {\n\t\t\tsetTimeout(() => {\n\t\t\t\t// work is 👇 getting done here\n\t\t\t\tresolve(work());\n\t\t\t\t// Setting 👇 time here for 1 work\n\t\t\t}, time);\n\t\t} else {\n\t\t\treject(console.log(Our shop is closed));\n\t\t}\n\t});\n};\n```\n\n##### Promise chaining\n\n```js\n// step 1\norder(2000, () => console.log(`${stocks.Fruits[0]} was selected`))\n\t// step 2\n\t.then(() => order(0000, () => console.log(production has started)))\n\t// step 3\n\t.then(() => {\n\t\treturn order(2000, () => console.log(Fruit has been chopped));\n\t})\n\t// step 4\n\t.then(() => {\n\t\treturn order(1000, () =>\n\t\t\tconsole.log(`${stocks.liquid[0]} and ${stocks.liquid[1]} added`)\n\t\t);\n\t})\n\t// step 5\n\t.then(() => {\n\t\treturn order(1000, () => console.log(start the machine));\n\t})\n\t// step 6\n\t.then(() => {\n\t\treturn order(2000, () =>\n\t\t\tconsole.log(`ice cream placed on ${stocks.holder[1]}`)\n\t\t);\n\t})\n\t// step 7\n\t.then(() => {\n\t\treturn order(3000, () => console.log(`${stocks.toppings[0]} as toppings`));\n\t})\n\t// Step 8\n\t.then(() => {\n\t\treturn order(2000, () => console.log(Serve Ice Cream));\n\t});\n```\n\n##### Error handling\n\n```javascript\nlet is_shop_open = false;\n// Add Error handling at the end of the Promise chain\n.catch(()=>{\n  console.log(Customer left)\n})\n// Output:\n// Our shop is closed -- from reject\n// Customer left -- from catch\n```\n\n##### The `.finally` handler\n\nThe `finally` handler which works regardless of whether our promise was resolved or rejected.\n\n```javascript\n// Whether we serve no customers or 100 customers, our shop will close at the end of the day. Optional - Add `finally` at the very bottom of the chain\n.finally(()=>{\n  console.log(end of day)\n})\n```\n\n#### Avoid Mistakes\n\n```js\ndoSomething()\n\t.then(function (result) {\n\t\t// If using a full function expression: return the promise\n\t\treturn doSomethingElse(result);\n\t})\n\t// If using arrow functions: omit the braces and implicitly return the result\n\t.then((newResult) => doThirdThing(newResult))\n\t// Even if the previous chained promise returns a result, the next one\n\t// doesn't necessarily have to use it. You can pass a handler that doesn't\n\t// consume any result.\n\t.then((/* result ignored */) => doFourthThing())\n\t// Always end the promise chain with a catch handler to avoid any\n\t// unhandled rejections!\n\t.catch((error) => console.error(error));\n```\n\n## More Promise Method (更多 Promise 对象方法)\n\n### `Promise.all()`\n\n- 发起多个并发请求，然后在所有 promise 都被解决后执行一些操作\n- 适合彼此相互依赖或者在其中任何一个`reject`时立即结束\n\n```js\nconst promise1 = Promise.resolve(3);\nconst promise2 = 42;\nconst promise3 = new Promise((resolve, reject) => {\n\tsetTimeout(resolve, 100, foo);\n});\nPromise.all([promise1, promise2, promise3]).then((values) => {\n\tconsole.log(values);\n});\n// expected output: Array [3, 42, foo]\n```\n\n### `Promise.race()`\n\n- 传入多个 promise 实例，谁跑的快，就以谁的结果执行回调\n\n```js\nconst first = new Promise((resolve, reject) => {\n\tsetTimeout(resolve, 500, 第一个);\n});\nconst second = new Promise((resolve, reject) => {\n\tsetTimeout(resolve, 100, 第二个);\n});\nPromise.race([first, second]).then((result) => {\n\tconsole.log(result); // 第二个\n});\n```\n\n#### Use Case\n\n1、把异步操作和定时器放到一起，如果定时器先触发，认为超时，告知用户\n\n```js\nfunction timeOut(time) {\n\tlet result = new Promise((resolve, reject) => {\n\t\tsetTimeout(() => {\n\t\t\tresolve(请求超时);\n\t\t}, time); // 为了验证方法，可以把时间设小点\n\t});\n\treturn result;\n}\nPromise.race([timeOut(200), fetch(https://api.github.com/users/ruanyf)]).then(\n\t(res) => {\n\t\tconsole.log(res);\n\t}\n);\n```\n\n2、如果图片等资源有多个存放路径，但是不确定哪个路径的资源更快，可以用该方法同时请求多个路径，哪个路径的资源最先拿到，使用哪个资源\n\n3、如果指定时间内没有获得结果，就将 Promise 的状态变为 `reject`，否则变为`resolve`\n\n```js\nconst p = Promise.race([\n\tfetch(/resource-that-may-take-a-while),\n\tnew Promise(function (resolve, reject) {\n\t\tsetTimeout(() => reject(new Error(request timeout)), 5000);\n\t}),\n]);\np.then(console.log).catch(console.error);\n```\n\n### `Promise.allSettled()` (ES2020)\n\n- 由 ES2020 引入\n- 功能\n  - 有多个彼此不依赖的异步任务成功完成时，或者您总是想知道每个 promise 的结果时，通常使用\n  - `Promise.all()`无法确定所有请求都结束。想要达到这个目的，写起来很麻烦，有了`Promise.allSettled()`，这就很容易了\n\n```js\nconst urls = [\n\t/* ... */\n];\nconst requests = urls.map((x) => fetch(x));\ntry {\n\tawait Promise.all(requests);\n\tconsole.log(所有请求都成功。);\n} catch {\n\tconsole.log(至少一个请求失败，其他请求可能还没结束。);\n}\n```\n\n#### 返回值\n\n- 返回一个在所有给定的 promise 都已经`fulfilled`或`rejected`后的 promise，并带有一个**对象数组**，每个对象表示对应的 promise 结果\n  - ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/z-Promise.allSettled.png)\n- 每个对象都有`status`属性，该属性的值只可能是字符串`fulfilled`或字符串`rejected`。\n  - `fulfilled`时，对象有`value`属性，\n  - `rejected`时有`reason`属性，对应两种状态的返回值。\n\n```js\nconst promises = [fetch(index.html), fetch(https://does-not-exist/)];\nconst results = await Promise.allSettled(promises);\n// 过滤出成功的请求\nconst successfulPromises = results.filter((p) => p.status === fulfilled);\n// 过滤出失败的请求，并输出原因\nconst errors = results\n\t.filter((p) => p.status === rejected)\n\t.map((p) => p.reason);\n```\n\n### `Promise.any()` (ES2020)\n\n- 输入\n  - 一个 Promise 数组\n- 返回值\n  - 一个新的 Promise 对象\n    - 该 Promise 对象在传入的 Promise 数组中的任何一个 Promise 解决时就会被解决\n    - 若所有的 Promise 都被拒绝，则返回的 Promise 会被拒绝，并且它的拒因是一个 `AggregateError` 对象实例，包含了所有被拒绝的 Promise 的原因 (可通过 `.errors` 属性读取)\n- 返回值处理\n\n```js\nPromise.any([p10, p11])\n\t.then((res) => console.log(res))\n\t.catch((err) => {\n\t\tif (err instanceof AggregateError) {\n\t\t\tconsole.error(AggregateError occurred:);\n\t\t\tconsole.log(err.errors);\n\t\t\terr.errors.forEach((err, index) => {\n\t\t\t\tconsole.error(`Error ${index + 1}:`, err);\n\t\t\t});\n\t\t} else {\n\t\t\tconsole.error(Other error occurred:, err);\n\t\t}\n\t});\n```\n",data={title:"Promise",DateStarted:new Date(1670544e6),draft:!0,tags:["JavaScript"],category:"Programming"},_internal={type:"content",filePath:"E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/js/data-fetching/promise.md",rawData:void 0},html='<h1 id="promise">Promise<a class="anchor" href="#promise"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h1>\n<h2 id="reference">Reference<a class="anchor" href="#reference"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li>⭐<a href="https://juejin.cn/post/7020335414980378655">通俗易懂的 Promise 知识点总结，检验一下你是否真的完全掌握了 Promise？ - 掘金</a>\n<ul>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise - JavaScript | MDN</a></li>\n<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises">Using Promises - JavaScript | MDN</a></li>\n</ul>\n</li>\n<li>[你好，JavaScript 异步编程---- 理解 JavaScript 异步的美妙](<a href="https://juejin.cn/post/6844903648162480142">https://juejin.cn/post/6844903648162480142</a> <a href="https://juejin.cn/post/6844903648162480142">https://juejin.cn/post/6844903648162480142</a>)</li>\n<li>[Promise 不会？？看这里！！！史上最通俗易懂的 Promise！！！](<a href="https://juejin.cn/post/6844903607968481287">https://juejin.cn/post/6844903607968481287</a> <a href="https://juejin.cn/post/6844903607968481287">https://juejin.cn/post/6844903607968481287</a>)</li>\n<li>[当 async/await 遇上 forEach](<a href="https://link.juejin.cn?target=https%3A%2F%2Fobjcer.com%2F2017%2F10%2F12%2Fasync-await-with-forEach%2F">https://link.juejin.cn?target=https%3A%2F%2Fobjcer.com%2F2017%2F10%2F12%2Fasync-await-with-forEach%2F</a> <a href="https://objcer.com/2017/10/12/async-await-with-forEach/">https://objcer.com/2017/10/12/async-await-with-forEach/</a>)</li>\n<li>[Promise 必知必会（十道题）](<a href="https://juejin.cn/post/6844903509934997511">https://juejin.cn/post/6844903509934997511</a> <a href="https://juejin.cn/post/6844903509934997511">https://juejin.cn/post/6844903509934997511</a>)</li>\n</ul>\n<h3 id="write-a-promise">Write a Promise<a class="anchor" href="#write-a-promise"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>⭐<a href="https://promisesaplus.com/">Promises/A+</a>\n<ul>\n<li>🛠️<a href="https://promisesaplus.com/implementations">Conformant Promises/A+ Implementations</a></li>\n<li>🛠️<a href="https://github.com/promises-aplus">Promises/A+ · GitHub</a></li>\n</ul>\n</li>\n<li>🚀<a href="https://juejin.cn/post/7274887531271012388#heading-13">手写 Promise：实现符合 Promises/A+规范的 Promise - 掘金</a></li>\n<li>🚀<a href="https://www.bilibili.com/video/BV1RR4y1p7my/?vd_source=be278a4cfd00a5f72dcf153eaca79333">手写 Promise 核心代码 - JavaScript 前端 Web 工程师_哔哩哔哩_bilibili</a>\n<ul>\n<li><a href="https://juejin.cn/post/7043758954496655397#heading-14">手把手一行一行代码教你“手写 Promise“，完美通过 Promises/A+ 官方 872 个测试用例 - 掘金</a></li>\n</ul>\n</li>\n<li>[Promise 实现原理（附源码）](<a href="https://juejin.cn/post/6844903665686282253">https://juejin.cn/post/6844903665686282253</a> <a href="https://juejin.cn/post/6844903665686282253">https://juejin.cn/post/6844903665686282253</a>)</li>\n<li>[100 行代码实现 Promises/A+ 规范](<a href="https://link.juejin.cn?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FqdJ0Xd8zTgtetFdlJL3P1g">https://link.juejin.cn?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FqdJ0Xd8zTgtetFdlJL3P1g</a> <a href="https://mp.weixin.qq.com/s/qdJ0Xd8zTgtetFdlJL3P1g">https://mp.weixin.qq.com/s/qdJ0Xd8zTgtetFdlJL3P1g</a>)</li>\n<li>[一起学习造轮子（一）：从零开始写一个符合 Promises/A+规范的 promise](<a href="https://juejin.cn/post/6844903617619558408#heading-34">https://juejin.cn/post/6844903617619558408#heading-34</a> <a href="https://juejin.cn/post/6844903617619558408#heading-34">https://juejin.cn/post/6844903617619558408#heading-34</a>)</li>\n<li>[BAT 前端经典面试问题：史上最最最详细的手写 Promise 教程](<a href="https://juejin.cn/post/6844903625769091079#heading-9">https://juejin.cn/post/6844903625769091079#heading-9</a> <a href="https://juejin.cn/post/6844903625769091079#heading-9">https://juejin.cn/post/6844903625769091079#heading-9</a>)</li>\n</ul>\n<h2 id="what-is-a-promise">What is a Promise?<a class="anchor" href="#what-is-a-promise"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<ul>\n<li>A promise is a returned <strong>object</strong> to which you attach callbacks, instead of passing callbacks into a function.</li>\n<li>It represents the eventual completion (or failure) of an asynchronous operation and its resulting value.</li>\n<li>Promise 是一种处理异步代码（而不会陷入回调地狱）的方式。</li>\n</ul>\n<h2 id="promise-state--result">Promise State &#x26; Result<a class="anchor" href="#promise-state--result"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h4 id="3-种状态-promisestate">3 种状态 (PromiseState)<a class="anchor" href="#3-种状态-promisestate"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<ul>\n<li><strong>pending</strong>: initial state, neither fulfilled nor rejected.</li>\n<li><strong>fulfilled</strong> (resolved): meaning that the operation was completed successfully.</li>\n<li><strong>rejected</strong>: meaning that the operation failed</li>\n<li><img src="https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/z-PromiseState-1.png" alt=""> <img src="https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/z-PromiseState.png" alt=""></li>\n</ul>\n<h4 id="执行特点">执行特点<a class="anchor" href="#执行特点"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<ul>\n<li>Promise 只以<code>第一次为准</code>，第一次成功就<code>永久</code>为<code>fulfilled</code>，第一次失败就永远状态为<code>rejected</code></li>\n<li>Promise 中有 <code>throw</code> 的话，就相当于执行了<code>reject</code></li>\n</ul>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">let</span><span style="color:#E1E4E8"> p1 </span><span style="color:#F97583">=</span><span style="color:#F97583"> new</span><span style="color:#79B8FF"> Promise</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">resolve</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">reject</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#B392F0">\tresolve</span><span style="color:#E1E4E8">(成功);</span></span>\n<span class="line"><span style="color:#B392F0">\treject</span><span style="color:#E1E4E8">(失败);</span></span>\n<span class="line"><span style="color:#E1E4E8">});</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(p1, p1);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583">let</span><span style="color:#E1E4E8"> p2 </span><span style="color:#F97583">=</span><span style="color:#F97583"> new</span><span style="color:#79B8FF"> Promise</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">resolve</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">reject</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#B392F0">\treject</span><span style="color:#E1E4E8">(失败);</span></span>\n<span class="line"><span style="color:#B392F0">\tresolve</span><span style="color:#E1E4E8">(成功);</span></span>\n<span class="line"><span style="color:#E1E4E8">});</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(p2, p2);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583">let</span><span style="color:#E1E4E8"> p3 </span><span style="color:#F97583">=</span><span style="color:#F97583"> new</span><span style="color:#79B8FF"> Promise</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">resolve</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">reject</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\tthrow</span><span style="color:#E1E4E8"> 报错;</span></span>\n<span class="line"><span style="color:#E1E4E8">});</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(p3, p3);</span></span>\n<span class="line"></span></code></pre>\n<h4 id="pending-state-特点">Pending State 特点<a class="anchor" href="#pending-state-特点"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<ul>\n<li>Promise 里没有执行<code>resolve</code>、<code>reject</code>以及<code>throw</code>的话，这个 promise 的状态也是<code>pending</code></li>\n<li><code>pending</code>状态下的 promise 不会执行回调函数<code>then()</code></li>\n</ul>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">let</span><span style="color:#E1E4E8"> myPromise1 </span><span style="color:#F97583">=</span><span style="color:#F97583"> new</span><span style="color:#79B8FF"> Promise</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {});</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(myPromise1 :</span><span style="color:#F97583">>></span><span style="color:#E1E4E8"> , myPromise1);</span></span>\n<span class="line"><span style="color:#F97583">let</span><span style="color:#E1E4E8"> myPromise2 </span><span style="color:#F97583">=</span><span style="color:#F97583"> new</span><span style="color:#79B8FF"> Promise</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">resolve</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">reject</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\tlet</span><span style="color:#E1E4E8"> a </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 1</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">\tfor</span><span style="color:#E1E4E8"> (</span><span style="color:#F97583">let</span><span style="color:#E1E4E8"> index </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 0</span><span style="color:#E1E4E8">; index </span><span style="color:#F97583">&#x3C;</span><span style="color:#79B8FF"> 5</span><span style="color:#E1E4E8">; index</span><span style="color:#F97583">++</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\ta</span><span style="color:#F97583">++</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">});</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(myPromise2 :</span><span style="color:#F97583">>></span><span style="color:#E1E4E8"> , myPromise2);</span></span>\n<span class="line"><span style="color:#E1E4E8">myPromise2.</span><span style="color:#B392F0">then</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#E1E4E8">\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(myPromise2执行了then); </span><span style="color:#6A737D">// 在 Promise pending 状态下不会执行</span></span>\n<span class="line"><span style="color:#E1E4E8">});</span></span>\n<span class="line"></span></code></pre>\n<h2 id="create-a-promise">Create a Promise<a class="anchor" href="#create-a-promise"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h3 id="new-promise"><code>new Promise()</code><a class="anchor" href="#new-promise"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h4 id="参数要求">参数要求<a class="anchor" href="#参数要求"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<ul>\n<li>使用 <code>new Promise()</code> 必须输入一个执行函数，否则会报错</li>\n</ul>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">let</span><span style="color:#E1E4E8"> myPromise0 </span><span style="color:#F97583">=</span><span style="color:#F97583"> new</span><span style="color:#79B8FF"> Promise</span><span style="color:#E1E4E8">();</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(myPromise0 :</span><span style="color:#F97583">>></span><span style="color:#E1E4E8"> , myPromise0); </span><span style="color:#6A737D">// 报错：TypeError: Promise resolver undefined</span></span>\n<span class="line"></span></code></pre>\n<h5 id="case">Case<a class="anchor" href="#case"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h5>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> makeRequest</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">location</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#F97583">\treturn</span><span style="color:#F97583"> new</span><span style="color:#79B8FF"> Promise</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">resolve</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">reject</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">`Making Request to ${</span><span style="color:#E1E4E8">location</span><span style="color:#9ECBFF">}`</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#F97583">\t\tif</span><span style="color:#E1E4E8"> (location </span><span style="color:#F97583">===</span><span style="color:#E1E4E8"> Google) {</span></span>\n<span class="line"><span style="color:#B392F0">\t\t\tresolve</span><span style="color:#E1E4E8">(Google says Hi);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t} </span><span style="color:#F97583">else</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#B392F0">\t\t\treject</span><span style="color:#E1E4E8">(We can only talk to Google);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">\t});</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"></span></code></pre>\n<h4 id="-执行顺序">⭐ 执行顺序<a class="anchor" href="#-执行顺序"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<ul>\n<li>Promise 构造函数是同步执行的，<code>promise.then</code>  中的函数是异步执行的</li>\n</ul>\n<h5 id="case-1">Case<a class="anchor" href="#case-1"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h5>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> promise</span><span style="color:#F97583"> =</span><span style="color:#F97583"> new</span><span style="color:#79B8FF"> Promise</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">resolve</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">reject</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#E1E4E8">\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">1</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#B392F0">\tresolve</span><span style="color:#E1E4E8">();</span></span>\n<span class="line"><span style="color:#E1E4E8">\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">2</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#E1E4E8">});</span></span>\n<span class="line"><span style="color:#E1E4E8">promise.</span><span style="color:#B392F0">then</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#E1E4E8">\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">3</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#E1E4E8">});</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">4</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"></span></code></pre>\n<h5 id="output">Output<a class="anchor" href="#output"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h5>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#B392F0">1</span></span>\n<span class="line"><span style="color:#B392F0">2</span></span>\n<span class="line"><span style="color:#B392F0">4</span></span>\n<span class="line"><span style="color:#B392F0">3</span></span>\n<span class="line"></span></code></pre>\n<h3 id="promiseresolve"><code>Promise.resolve()</code><a class="anchor" href="#promiseresolve"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>将现有对象转为 Promise 对象</p>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#79B8FF">Promise</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">resolve</span><span style="color:#E1E4E8">(foo);</span></span>\n<span class="line"><span style="color:#6A737D">// 等价于</span></span>\n<span class="line"><span style="color:#F97583">new</span><span style="color:#79B8FF"> Promise</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">resolve</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#B392F0"> resolve</span><span style="color:#E1E4E8">(foo));</span></span>\n<span class="line"></span></code></pre>\n<h4 id="参数的四种情况">参数的四种情况<a class="anchor" href="#参数的四种情况"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<ol>\n<li>如果参数是 <code>Promise</code> 实例\n<ul>\n<li>那么 <code>Promise.resolve()</code> 将不做任何修改、原封不动地返回这个实例。</li>\n</ul>\n</li>\n<li>参数是一个 thenable (具有<code>then</code>方法的对象) 对象\n<ul>\n<li>会将这个对象转为 <code>Promise</code> 对象，然后就立即执行 thenable 对象的 <code>then</code>方法</li>\n</ul>\n</li>\n<li>参数是一个原始值，或者是一个不具有<code>then</code>方法的对象\n<ul>\n<li>则<code>Promise.resolve</code>方法返回一个新的  <code>Promise</code>  对象，状态为<code>resolved</code></li>\n</ul>\n</li>\n<li><code>Promise.resolve()</code>方法允许调用时不带参数\n<ul>\n<li>直接返回一个 <code>resolved</code>状态的 <code>Promise</code> 对象。</li>\n</ul>\n</li>\n</ol>\n<h4 id="example">Example<a class="anchor" href="#example"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> tick</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> Date.</span><span style="color:#B392F0">now</span><span style="color:#E1E4E8">();</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#B392F0"> log</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> (</span><span style="color:#FFAB70">v</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">`${</span><span style="color:#E1E4E8">v</span><span style="color:#9ECBFF">} </span><span style="color:#79B8FF">\\n</span><span style="color:#9ECBFF"> Elapsed: ${</span><span style="color:#E1E4E8">Date</span><span style="color:#9ECBFF">.</span><span style="color:#B392F0">now</span><span style="color:#9ECBFF">() </span><span style="color:#F97583">-</span><span style="color:#E1E4E8"> tick</span><span style="color:#9ECBFF">}ms`</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#B392F0"> codeBlocker</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#6A737D">\t// Blocking</span></span>\n<span class="line"><span style="color:#6A737D">\t// let i = 0;</span></span>\n<span class="line"><span style="color:#6A737D">\t// while(i &#x3C; 1000000000) { i++;}</span></span>\n<span class="line"><span style="color:#6A737D">\t// return \'🐷 billion loops done\';</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D">\t// Async blocking</span></span>\n<span class="line"><span style="color:#6A737D">\t// return new Promise((resolve, reject) => {</span></span>\n<span class="line"><span style="color:#6A737D">\t// let i = 0;</span></span>\n<span class="line"><span style="color:#6A737D">\t// while(i &#x3C; 1000000000) { i++;}</span></span>\n<span class="line"><span style="color:#6A737D">\t// resolve(\'🐷 billion loops done\');</span></span>\n<span class="line"><span style="color:#6A737D">\t// })</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D">\t// Non-blocking</span></span>\n<span class="line"><span style="color:#F97583">\treturn</span><span style="color:#79B8FF"> Promise</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">resolve</span><span style="color:#E1E4E8">().</span><span style="color:#B392F0">then</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">v</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\t\tlet</span><span style="color:#E1E4E8"> i </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> 0</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">\t\twhile</span><span style="color:#E1E4E8"> (i </span><span style="color:#F97583">&#x3C;</span><span style="color:#79B8FF"> 1000000000</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\ti</span><span style="color:#F97583">++</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t}</span></span>\n<span class="line"><span style="color:#F97583">\t\treturn</span><span style="color:#E1E4E8"> 🐷 billion loops done;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t});</span></span>\n<span class="line"><span style="color:#E1E4E8">};</span></span>\n<span class="line"><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(🥪 Synchronous </span><span style="color:#79B8FF">1</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#B392F0">codeBlocker</span><span style="color:#E1E4E8">().</span><span style="color:#B392F0">then</span><span style="color:#E1E4E8">(log);</span></span>\n<span class="line"><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(🥪 Synchronous </span><span style="color:#79B8FF">2</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"></span></code></pre>\n<h3 id="promisereject"><code>Promise.reject()</code><a class="anchor" href="#promisereject"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li><code>Promise.reject()</code>方法的参数，会原封不动地作为<code>reject</code>的理由，变成后续方法的参数</li>\n</ul>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> thenable</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#B392F0">\tthen</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">resolve</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">reject</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#B392F0">\t\treject</span><span style="color:#E1E4E8">(出错了);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t},</span></span>\n<span class="line"><span style="color:#E1E4E8">};</span></span>\n<span class="line"><span style="color:#79B8FF">Promise</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">reject</span><span style="color:#E1E4E8">(thenable).</span><span style="color:#B392F0">catch</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">e</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#E1E4E8">\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(e </span><span style="color:#F97583">===</span><span style="color:#E1E4E8"> thenable);</span></span>\n<span class="line"><span style="color:#E1E4E8">});</span></span>\n<span class="line"><span style="color:#6A737D">// true</span></span>\n<span class="line"></span></code></pre>\n<h2 id="consume-promise">Consume Promise<a class="anchor" href="#consume-promise"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h3 id="promiseprototypethen"><code>Promise.prototype.then()</code><a class="anchor" href="#promiseprototypethen"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<p>接收两个回调函数作为参数，均为可选参数</p>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#79B8FF">Promise</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">resolve</span><span style="color:#E1E4E8">().</span><span style="color:#B392F0">then</span><span style="color:#E1E4E8">(</span><span style="color:#B392F0">onFulfilled</span><span style="color:#E1E4E8">()</span><span style="color:#F97583">=></span><span style="color:#E1E4E8">{}, </span><span style="color:#B392F0">onReject</span><span style="color:#E1E4E8">()</span><span style="color:#F97583">=</span><span style="color:#E1E4E8">{})</span></span>\n<span class="line"></span></code></pre>\n<h3 id="promiseprototypecatch"><code>Promise.prototype.catch()</code><a class="anchor" href="#promiseprototypecatch"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h4 id="错误捕获条件">错误捕获条件<a class="anchor" href="#错误捕获条件"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<p>❌ 在<code>then</code>或<code>catch</code>中 <code>return</code> 一个 <code>new Error</code> 对象不会被捕获：\n<code>return new Error(Error!)</code>\n✅ 必须使用以下任一一种语法：</p>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">return</span><span style="color:#79B8FF"> Promise</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">reject</span><span style="color:#E1E4E8">(</span><span style="color:#F97583">new</span><span style="color:#B392F0"> Error</span><span style="color:#E1E4E8">(error</span><span style="color:#F97583">!!!</span><span style="color:#E1E4E8">));</span></span>\n<span class="line"><span style="color:#F97583">throw</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> Error</span><span style="color:#E1E4E8">(error</span><span style="color:#F97583">!!!</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"></span></code></pre>\n<h4 id="级联错误">级联错误<a class="anchor" href="#级联错误"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<ul>\n<li>如果在  <code>catch()</code>  内部引发错误，则可以附加第二个  <code>catch()</code>来处理，依此类推</li>\n</ul>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">new</span><span style="color:#79B8FF"> Promise</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">resolve</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">reject</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\tthrow</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> Error</span><span style="color:#E1E4E8">(错误);</span></span>\n<span class="line"><span style="color:#E1E4E8">})</span></span>\n<span class="line"><span style="color:#E1E4E8">\t.</span><span style="color:#B392F0">catch</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">err</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\t\tthrow</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> Error</span><span style="color:#E1E4E8">(错误);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t})</span></span>\n<span class="line"><span style="color:#E1E4E8">\t.</span><span style="color:#B392F0">catch</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">err</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tconsole.</span><span style="color:#B392F0">error</span><span style="color:#E1E4E8">(err);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t});</span></span>\n<span class="line"></span></code></pre>\n<h3 id="promiseprototypefinally"><code>Promise.prototype.finally()</code><a class="anchor" href="#promiseprototypefinally"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>用于指定不管 Promise 对象最后状态如何，都会执行的操作。该方法是 ES2018 引入标准的\n<ul>\n<li>避免了同样的语句需要在<code>then()</code>和<code>catch()</code>中各写一次的情况。</li>\n</ul>\n</li>\n</ul>\n<h3 id="example-consume-promise-">Example (Consume Promise )<a class="anchor" href="#example-consume-promise-"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<h4 id="example-promise-chain">Example (Promise chain)<a class="anchor" href="#example-promise-chain"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#6A737D">// import fetch from node-fetch;</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> promise</span><span style="color:#F97583"> =</span><span style="color:#B392F0"> fetch</span><span style="color:#E1E4E8">(https:</span><span style="color:#6A737D">//jsonplaceholder.typicode.com/todos/1);</span></span>\n<span class="line"><span style="color:#E1E4E8">promise</span></span>\n<span class="line"><span style="color:#E1E4E8">\t.</span><span style="color:#B392F0">then</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">res</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> res.</span><span style="color:#B392F0">json</span><span style="color:#E1E4E8">())</span></span>\n<span class="line"><span style="color:#E1E4E8">\t.</span><span style="color:#B392F0">then</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">todo</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\t\tthrow</span><span style="color:#F97583"> new</span><span style="color:#B392F0"> Error</span><span style="color:#E1E4E8">(uh oh);</span></span>\n<span class="line"><span style="color:#F97583">\t\treturn</span><span style="color:#E1E4E8"> todo;</span></span>\n<span class="line"><span style="color:#E1E4E8">\t})</span></span>\n<span class="line"><span style="color:#E1E4E8">\t.</span><span style="color:#B392F0">then</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">todo</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(😛, todo.title)) </span><span style="color:#6A737D">// This line will be bypasses</span></span>\n<span class="line"><span style="color:#E1E4E8">\t.</span><span style="color:#B392F0">catch</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">err</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> console.</span><span style="color:#B392F0">error</span><span style="color:#E1E4E8">(😭, err));</span></span>\n<span class="line"><span style="color:#E1E4E8">console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(🥪 Synchronous);</span></span>\n<span class="line"></span></code></pre>\n<h4 id="example-ice-cream-shop">Example (Ice-cream Shop)<a class="anchor" href="#example-ice-cream-shop"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<ul>\n<li><a href="https://www.bilibili.com/video/BV1g44y1z7N3/?spm_id_from=333.788.recommend_more_video.4&#x26;vd_source=be278a4cfd00a5f72dcf153eaca79333">[英字] JavaScript 异步编程（Async/Await、Promise、Callback）FreeCodeCamp</a></li>\n<li><a href="https://www.freecodecamp.org/news/javascript-async-await-tutorial-learn-callbacks-promises-async-await-by-making-icecream/">FreeCodeCamp-Blog</a></li>\n</ul>\n<h5 id="relationship-between-time-and-work">Relationship between time and work<a class="anchor" href="#relationship-between-time-and-work"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h5>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">let</span><span style="color:#E1E4E8"> is_shop_open </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> true</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">let</span><span style="color:#B392F0"> order</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> (</span><span style="color:#FFAB70">time</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">work</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\treturn</span><span style="color:#F97583"> new</span><span style="color:#79B8FF"> Promise</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">resolve</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">reject</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\t\tif</span><span style="color:#E1E4E8"> (is_shop_open) {</span></span>\n<span class="line"><span style="color:#B392F0">\t\t\tsetTimeout</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#6A737D">\t\t\t\t// work is 👇 getting done here</span></span>\n<span class="line"><span style="color:#B392F0">\t\t\t\tresolve</span><span style="color:#E1E4E8">(</span><span style="color:#B392F0">work</span><span style="color:#E1E4E8">());</span></span>\n<span class="line"><span style="color:#6A737D">\t\t\t\t// Setting 👇 time here for 1 work</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t}, time);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t} </span><span style="color:#F97583">else</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#B392F0">\t\t\treject</span><span style="color:#E1E4E8">(console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(Our shop is closed));</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">\t});</span></span>\n<span class="line"><span style="color:#E1E4E8">};</span></span>\n<span class="line"></span></code></pre>\n<h5 id="promise-chaining">Promise chaining<a class="anchor" href="#promise-chaining"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h5>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#6A737D">// step 1</span></span>\n<span class="line"><span style="color:#B392F0">order</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">2000</span><span style="color:#E1E4E8">, () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">`${</span><span style="color:#E1E4E8">stocks</span><span style="color:#9ECBFF">.</span><span style="color:#E1E4E8">Fruits</span><span style="color:#9ECBFF">[</span><span style="color:#79B8FF">0</span><span style="color:#9ECBFF">]</span><span style="color:#9ECBFF">} was selected`</span><span style="color:#E1E4E8">))</span></span>\n<span class="line"><span style="color:#6A737D">\t// step 2</span></span>\n<span class="line"><span style="color:#E1E4E8">\t.</span><span style="color:#B392F0">then</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span><span style="color:#B392F0"> order</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">0000</span><span style="color:#E1E4E8">, () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(production has started)))</span></span>\n<span class="line"><span style="color:#6A737D">\t// step 3</span></span>\n<span class="line"><span style="color:#E1E4E8">\t.</span><span style="color:#B392F0">then</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\t\treturn</span><span style="color:#B392F0"> order</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">2000</span><span style="color:#E1E4E8">, () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(Fruit has been chopped));</span></span>\n<span class="line"><span style="color:#E1E4E8">\t})</span></span>\n<span class="line"><span style="color:#6A737D">\t// step 4</span></span>\n<span class="line"><span style="color:#E1E4E8">\t.</span><span style="color:#B392F0">then</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\t\treturn</span><span style="color:#B392F0"> order</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">1000</span><span style="color:#E1E4E8">, () </span><span style="color:#F97583">=></span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">`${</span><span style="color:#E1E4E8">stocks</span><span style="color:#9ECBFF">.</span><span style="color:#E1E4E8">liquid</span><span style="color:#9ECBFF">[</span><span style="color:#79B8FF">0</span><span style="color:#9ECBFF">]</span><span style="color:#9ECBFF">} and ${</span><span style="color:#E1E4E8">stocks</span><span style="color:#9ECBFF">.</span><span style="color:#E1E4E8">liquid</span><span style="color:#9ECBFF">[</span><span style="color:#79B8FF">1</span><span style="color:#9ECBFF">]</span><span style="color:#9ECBFF">} added`</span><span style="color:#E1E4E8">)</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t})</span></span>\n<span class="line"><span style="color:#6A737D">\t// step 5</span></span>\n<span class="line"><span style="color:#E1E4E8">\t.</span><span style="color:#B392F0">then</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\t\treturn</span><span style="color:#B392F0"> order</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">1000</span><span style="color:#E1E4E8">, () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(start the machine));</span></span>\n<span class="line"><span style="color:#E1E4E8">\t})</span></span>\n<span class="line"><span style="color:#6A737D">\t// step 6</span></span>\n<span class="line"><span style="color:#E1E4E8">\t.</span><span style="color:#B392F0">then</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\t\treturn</span><span style="color:#B392F0"> order</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">2000</span><span style="color:#E1E4E8">, () </span><span style="color:#F97583">=></span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">`ice cream placed on ${</span><span style="color:#E1E4E8">stocks</span><span style="color:#9ECBFF">.</span><span style="color:#E1E4E8">holder</span><span style="color:#9ECBFF">[</span><span style="color:#79B8FF">1</span><span style="color:#9ECBFF">]</span><span style="color:#9ECBFF">}`</span><span style="color:#E1E4E8">)</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t})</span></span>\n<span class="line"><span style="color:#6A737D">\t// step 7</span></span>\n<span class="line"><span style="color:#E1E4E8">\t.</span><span style="color:#B392F0">then</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\t\treturn</span><span style="color:#B392F0"> order</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">3000</span><span style="color:#E1E4E8">, () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">`${</span><span style="color:#E1E4E8">stocks</span><span style="color:#9ECBFF">.</span><span style="color:#E1E4E8">toppings</span><span style="color:#9ECBFF">[</span><span style="color:#79B8FF">0</span><span style="color:#9ECBFF">]</span><span style="color:#9ECBFF">} as toppings`</span><span style="color:#E1E4E8">));</span></span>\n<span class="line"><span style="color:#E1E4E8">\t})</span></span>\n<span class="line"><span style="color:#6A737D">\t// Step 8</span></span>\n<span class="line"><span style="color:#E1E4E8">\t.</span><span style="color:#B392F0">then</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\t\treturn</span><span style="color:#B392F0"> order</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">2000</span><span style="color:#E1E4E8">, () </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(Serve Ice Cream));</span></span>\n<span class="line"><span style="color:#E1E4E8">\t});</span></span>\n<span class="line"></span></code></pre>\n<h5 id="error-handling">Error handling<a class="anchor" href="#error-handling"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h5>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">let</span><span style="color:#E1E4E8"> is_shop_open </span><span style="color:#F97583">=</span><span style="color:#79B8FF"> false</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#6A737D">// Add Error handling at the end of the Promise chain</span></span>\n<span class="line"><span style="color:#E1E4E8">.</span><span style="color:#B392F0">catch</span><span style="color:#E1E4E8">(()</span><span style="color:#F97583">=></span><span style="color:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#E1E4E8">  console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(Customer left)</span></span>\n<span class="line"><span style="color:#E1E4E8">})</span></span>\n<span class="line"><span style="color:#6A737D">// Output:</span></span>\n<span class="line"><span style="color:#6A737D">// Our shop is closed -- from reject</span></span>\n<span class="line"><span style="color:#6A737D">// Customer left -- from catch</span></span>\n<span class="line"></span></code></pre>\n<h5 id="thefinallyhandler">The <code>.finally</code> handler<a class="anchor" href="#thefinallyhandler"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h5>\n<p>The <code>finally</code> handler which works regardless of whether our promise was resolved or rejected.</p>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#6A737D">// Whether we serve no customers or 100 customers, our shop will close at the end of the day. Optional - Add `finally` at the very bottom of the chain</span></span>\n<span class="line"><span style="color:#E1E4E8">.</span><span style="color:#B392F0">finally</span><span style="color:#E1E4E8">(()</span><span style="color:#F97583">=></span><span style="color:#E1E4E8">{</span></span>\n<span class="line"><span style="color:#E1E4E8">  console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(end </span><span style="color:#F97583">of</span><span style="color:#E1E4E8"> day)</span></span>\n<span class="line"><span style="color:#E1E4E8">})</span></span>\n<span class="line"></span></code></pre>\n<h4 id="avoid-mistakes">Avoid Mistakes<a class="anchor" href="#avoid-mistakes"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#B392F0">doSomething</span><span style="color:#E1E4E8">()</span></span>\n<span class="line"><span style="color:#E1E4E8">\t.</span><span style="color:#B392F0">then</span><span style="color:#E1E4E8">(</span><span style="color:#F97583">function</span><span style="color:#E1E4E8"> (</span><span style="color:#FFAB70">result</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#6A737D">\t\t// If using a full function expression: return the promise</span></span>\n<span class="line"><span style="color:#F97583">\t\treturn</span><span style="color:#B392F0"> doSomethingElse</span><span style="color:#E1E4E8">(result);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t})</span></span>\n<span class="line"><span style="color:#6A737D">\t// If using arrow functions: omit the braces and implicitly return the result</span></span>\n<span class="line"><span style="color:#E1E4E8">\t.</span><span style="color:#B392F0">then</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">newResult</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#B392F0"> doThirdThing</span><span style="color:#E1E4E8">(newResult))</span></span>\n<span class="line"><span style="color:#6A737D">\t// Even if the previous chained promise returns a result, the next one</span></span>\n<span class="line"><span style="color:#6A737D">\t// doesn\'t necessarily have to use it. You can pass a handler that doesn\'t</span></span>\n<span class="line"><span style="color:#6A737D">\t// consume any result.</span></span>\n<span class="line"><span style="color:#E1E4E8">\t.</span><span style="color:#B392F0">then</span><span style="color:#E1E4E8">((</span><span style="color:#6A737D">/* result ignored */</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#B392F0"> doFourthThing</span><span style="color:#E1E4E8">())</span></span>\n<span class="line"><span style="color:#6A737D">\t// Always end the promise chain with a catch handler to avoid any</span></span>\n<span class="line"><span style="color:#6A737D">\t// unhandled rejections!</span></span>\n<span class="line"><span style="color:#E1E4E8">\t.</span><span style="color:#B392F0">catch</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">error</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> console.</span><span style="color:#B392F0">error</span><span style="color:#E1E4E8">(error));</span></span>\n<span class="line"></span></code></pre>\n<h2 id="more-promise-method-更多-promise-对象方法">More Promise Method (更多 Promise 对象方法)<a class="anchor" href="#more-promise-method-更多-promise-对象方法"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h2>\n<h3 id="promiseall"><code>Promise.all()</code><a class="anchor" href="#promiseall"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>发起多个并发请求，然后在所有 promise 都被解决后执行一些操作</li>\n<li>适合彼此相互依赖或者在其中任何一个<code>reject</code>时立即结束</li>\n</ul>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> promise1</span><span style="color:#F97583"> =</span><span style="color:#79B8FF"> Promise</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">resolve</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">3</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> promise2</span><span style="color:#F97583"> =</span><span style="color:#79B8FF"> 42</span><span style="color:#E1E4E8">;</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> promise3</span><span style="color:#F97583"> =</span><span style="color:#F97583"> new</span><span style="color:#79B8FF"> Promise</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">resolve</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">reject</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#B392F0">\tsetTimeout</span><span style="color:#E1E4E8">(resolve, </span><span style="color:#79B8FF">100</span><span style="color:#E1E4E8">, foo);</span></span>\n<span class="line"><span style="color:#E1E4E8">});</span></span>\n<span class="line"><span style="color:#79B8FF">Promise</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">all</span><span style="color:#E1E4E8">([promise1, promise2, promise3]).</span><span style="color:#B392F0">then</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">values</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#E1E4E8">\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(values);</span></span>\n<span class="line"><span style="color:#E1E4E8">});</span></span>\n<span class="line"><span style="color:#6A737D">// expected output: Array [3, 42, foo]</span></span>\n<span class="line"></span></code></pre>\n<h3 id="promiserace"><code>Promise.race()</code><a class="anchor" href="#promiserace"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>传入多个 promise 实例，谁跑的快，就以谁的结果执行回调</li>\n</ul>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> first</span><span style="color:#F97583"> =</span><span style="color:#F97583"> new</span><span style="color:#79B8FF"> Promise</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">resolve</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">reject</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#B392F0">\tsetTimeout</span><span style="color:#E1E4E8">(resolve, </span><span style="color:#79B8FF">500</span><span style="color:#E1E4E8">, 第一个);</span></span>\n<span class="line"><span style="color:#E1E4E8">});</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> second</span><span style="color:#F97583"> =</span><span style="color:#F97583"> new</span><span style="color:#79B8FF"> Promise</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">resolve</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">reject</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#B392F0">\tsetTimeout</span><span style="color:#E1E4E8">(resolve, </span><span style="color:#79B8FF">100</span><span style="color:#E1E4E8">, 第二个);</span></span>\n<span class="line"><span style="color:#E1E4E8">});</span></span>\n<span class="line"><span style="color:#79B8FF">Promise</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">race</span><span style="color:#E1E4E8">([first, second]).</span><span style="color:#B392F0">then</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">result</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#E1E4E8">\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(result); </span><span style="color:#6A737D">// 第二个</span></span>\n<span class="line"><span style="color:#E1E4E8">});</span></span>\n<span class="line"></span></code></pre>\n<h4 id="use-case">Use Case<a class="anchor" href="#use-case"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<p>1、把异步操作和定时器放到一起，如果定时器先触发，认为超时，告知用户</p>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">function</span><span style="color:#B392F0"> timeOut</span><span style="color:#E1E4E8">(</span><span style="color:#FFAB70">time</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#F97583">\tlet</span><span style="color:#E1E4E8"> result </span><span style="color:#F97583">=</span><span style="color:#F97583"> new</span><span style="color:#79B8FF"> Promise</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">resolve</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">reject</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#B392F0">\t\tsetTimeout</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#B392F0">\t\t\tresolve</span><span style="color:#E1E4E8">(请求超时);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t}, time); </span><span style="color:#6A737D">// 为了验证方法，可以把时间设小点</span></span>\n<span class="line"><span style="color:#E1E4E8">\t});</span></span>\n<span class="line"><span style="color:#F97583">\treturn</span><span style="color:#E1E4E8"> result;</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"><span style="color:#79B8FF">Promise</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">race</span><span style="color:#E1E4E8">([</span><span style="color:#B392F0">timeOut</span><span style="color:#E1E4E8">(</span><span style="color:#79B8FF">200</span><span style="color:#E1E4E8">), </span><span style="color:#B392F0">fetch</span><span style="color:#E1E4E8">(https:</span><span style="color:#6A737D">//api.github.com/users/ruanyf)]).then(</span></span>\n<span class="line"><span style="color:#E1E4E8">\t(</span><span style="color:#FFAB70">res</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(res);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">);</span></span>\n<span class="line"></span></code></pre>\n<p>2、如果图片等资源有多个存放路径，但是不确定哪个路径的资源更快，可以用该方法同时请求多个路径，哪个路径的资源最先拿到，使用哪个资源</p>\n<p>3、如果指定时间内没有获得结果，就将 Promise 的状态变为 <code>reject</code>，否则变为<code>resolve</code></p>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> p</span><span style="color:#F97583"> =</span><span style="color:#79B8FF"> Promise</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">race</span><span style="color:#E1E4E8">([</span></span>\n<span class="line"><span style="color:#B392F0">\tfetch</span><span style="color:#E1E4E8">(</span><span style="color:#F97583">/</span><span style="color:#E1E4E8">resource</span><span style="color:#F97583">-</span><span style="color:#E1E4E8">that</span><span style="color:#F97583">-</span><span style="color:#E1E4E8">may</span><span style="color:#F97583">-</span><span style="color:#E1E4E8">take</span><span style="color:#F97583">-</span><span style="color:#E1E4E8">a</span><span style="color:#F97583">-</span><span style="color:#E1E4E8">while),</span></span>\n<span class="line"><span style="color:#F97583">\tnew</span><span style="color:#79B8FF"> Promise</span><span style="color:#E1E4E8">(</span><span style="color:#F97583">function</span><span style="color:#E1E4E8"> (</span><span style="color:#FFAB70">resolve</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">reject</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#B392F0">\t\tsetTimeout</span><span style="color:#E1E4E8">(() </span><span style="color:#F97583">=></span><span style="color:#B392F0"> reject</span><span style="color:#E1E4E8">(</span><span style="color:#F97583">new</span><span style="color:#B392F0"> Error</span><span style="color:#E1E4E8">(request timeout)), </span><span style="color:#79B8FF">5000</span><span style="color:#E1E4E8">);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t}),</span></span>\n<span class="line"><span style="color:#E1E4E8">]);</span></span>\n<span class="line"><span style="color:#E1E4E8">p.</span><span style="color:#B392F0">then</span><span style="color:#E1E4E8">(console.log).</span><span style="color:#B392F0">catch</span><span style="color:#E1E4E8">(console.error);</span></span>\n<span class="line"></span></code></pre>\n<h3 id="promiseallsettled-es2020"><code>Promise.allSettled()</code> (ES2020)<a class="anchor" href="#promiseallsettled-es2020"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>由 ES2020 引入</li>\n<li>功能\n<ul>\n<li>有多个彼此不依赖的异步任务成功完成时，或者您总是想知道每个 promise 的结果时，通常使用</li>\n<li><code>Promise.all()</code>无法确定所有请求都结束。想要达到这个目的，写起来很麻烦，有了<code>Promise.allSettled()</code>，这就很容易了</li>\n</ul>\n</li>\n</ul>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> urls</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> [</span></span>\n<span class="line"><span style="color:#6A737D">\t/* ... */</span></span>\n<span class="line"><span style="color:#E1E4E8">];</span></span>\n<span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> requests</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> urls.</span><span style="color:#B392F0">map</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">x</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#B392F0"> fetch</span><span style="color:#E1E4E8">(x));</span></span>\n<span class="line"><span style="color:#F97583">try</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\tawait</span><span style="color:#79B8FF"> Promise</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">all</span><span style="color:#E1E4E8">(requests);</span></span>\n<span class="line"><span style="color:#E1E4E8">\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(所有请求都成功。);</span></span>\n<span class="line"><span style="color:#E1E4E8">} </span><span style="color:#F97583">catch</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#E1E4E8">\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(至少一个请求失败，其他请求可能还没结束。);</span></span>\n<span class="line"><span style="color:#E1E4E8">}</span></span>\n<span class="line"></span></code></pre>\n<h4 id="返回值">返回值<a class="anchor" href="#返回值"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h4>\n<ul>\n<li>返回一个在所有给定的 promise 都已经<code>fulfilled</code>或<code>rejected</code>后的 promise，并带有一个<strong>对象数组</strong>，每个对象表示对应的 promise 结果\n<ul>\n<li><img src="https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/z-Promise.allSettled.png" alt=""></li>\n</ul>\n</li>\n<li>每个对象都有<code>status</code>属性，该属性的值只可能是字符串<code>fulfilled</code>或字符串<code>rejected</code>。\n<ul>\n<li><code>fulfilled</code>时，对象有<code>value</code>属性，</li>\n<li><code>rejected</code>时有<code>reason</code>属性，对应两种状态的返回值。</li>\n</ul>\n</li>\n</ul>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#F97583">const</span><span style="color:#79B8FF"> promises</span><span style="color:#F97583"> =</span><span style="color:#E1E4E8"> [</span><span style="color:#B392F0">fetch</span><span style="color:#E1E4E8">(index.html), </span><span style="color:#B392F0">fetch</span><span style="color:#E1E4E8">(https:</span><span style="color:#6A737D">//does-not-exist/)];</span></span>\n<span class="line"><span style="color:#E1E4E8">const results </span><span style="color:#F97583">=</span><span style="color:#F97583"> await</span><span style="color:#79B8FF"> Promise</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">allSettled</span><span style="color:#E1E4E8">(promises);</span></span>\n<span class="line"><span style="color:#6A737D">// 过滤出成功的请求</span></span>\n<span class="line"><span style="color:#E1E4E8">const successfulPromises </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> results.</span><span style="color:#B392F0">filter</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">p</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> p.status </span><span style="color:#F97583">===</span><span style="color:#E1E4E8"> fulfilled);</span></span>\n<span class="line"><span style="color:#6A737D">// 过滤出失败的请求，并输出原因</span></span>\n<span class="line"><span style="color:#E1E4E8">const errors </span><span style="color:#F97583">=</span><span style="color:#E1E4E8"> results</span></span>\n<span class="line"><span style="color:#E1E4E8">\t.</span><span style="color:#B392F0">filter</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">p</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> p.status </span><span style="color:#F97583">===</span><span style="color:#E1E4E8"> rejected)</span></span>\n<span class="line"><span style="color:#E1E4E8">\t.</span><span style="color:#B392F0">map</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">p</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> p.reason);</span></span>\n<span class="line"></span></code></pre>\n<h3 id="promiseany-es2020"><code>Promise.any()</code> (ES2020)<a class="anchor" href="#promiseany-es2020"><span class="anchor-icon" data-pagefind-ignore="">#</span></a></h3>\n<ul>\n<li>输入\n<ul>\n<li>一个 Promise 数组</li>\n</ul>\n</li>\n<li>返回值\n<ul>\n<li>一个新的 Promise 对象\n<ul>\n<li>该 Promise 对象在传入的 Promise 数组中的任何一个 Promise 解决时就会被解决</li>\n<li>若所有的 Promise 都被拒绝，则返回的 Promise 会被拒绝，并且它的拒因是一个 <code>AggregateError</code> 对象实例，包含了所有被拒绝的 Promise 的原因 (可通过 <code>.errors</code> 属性读取)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>返回值处理</li>\n</ul>\n<pre class="astro-code github-dark" style="background-color:#24292e;color:#e1e4e8; overflow-x: auto;" tabindex="0"><code><span class="line"><span style="color:#79B8FF">Promise</span><span style="color:#E1E4E8">.</span><span style="color:#B392F0">any</span><span style="color:#E1E4E8">([p10, p11])</span></span>\n<span class="line"><span style="color:#E1E4E8">\t.</span><span style="color:#B392F0">then</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">res</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> console.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(res))</span></span>\n<span class="line"><span style="color:#E1E4E8">\t.</span><span style="color:#B392F0">catch</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">err</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#F97583">\t\tif</span><span style="color:#E1E4E8"> (err </span><span style="color:#F97583">instanceof</span><span style="color:#B392F0"> AggregateError</span><span style="color:#E1E4E8">) {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\tconsole.</span><span style="color:#B392F0">error</span><span style="color:#E1E4E8">(AggregateError occurred:);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\tconsole.</span><span style="color:#B392F0">log</span><span style="color:#E1E4E8">(err.errors);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\terr.errors.</span><span style="color:#B392F0">forEach</span><span style="color:#E1E4E8">((</span><span style="color:#FFAB70">err</span><span style="color:#E1E4E8">, </span><span style="color:#FFAB70">index</span><span style="color:#E1E4E8">) </span><span style="color:#F97583">=></span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t\tconsole.</span><span style="color:#B392F0">error</span><span style="color:#E1E4E8">(</span><span style="color:#9ECBFF">`Error ${</span><span style="color:#E1E4E8">index</span><span style="color:#F97583"> +</span><span style="color:#79B8FF"> 1</span><span style="color:#9ECBFF">}:`</span><span style="color:#E1E4E8">, err);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\t});</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t} </span><span style="color:#F97583">else</span><span style="color:#E1E4E8"> {</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t\tconsole.</span><span style="color:#B392F0">error</span><span style="color:#E1E4E8">(Other error occurred:, err);</span></span>\n<span class="line"><span style="color:#E1E4E8">\t\t}</span></span>\n<span class="line"><span style="color:#E1E4E8">\t});</span></span>\n<span class="line"></span></code></pre>',frontmatter={type:"D",title:"Promise",DateStarted:"2022-12-09T00:00:00.000Z",DateModified:"2024-04-19T00:00:00.000Z",status:null,topic:["Async"],tags:["JavaScript"],category:"Programming",draft:!0,minutes:11,words:2222},file="E:/SynologyDrive/Codespace/blog-site/mynote/my-fuwari-blog/src/content/posts/js/data-fetching/promise.md",url=void 0;function rawContent(){return"\n# Promise\n\n## Reference\n\n- ⭐[通俗易懂的 Promise 知识点总结，检验一下你是否真的完全掌握了 Promise？ - 掘金](https://juejin.cn/post/7020335414980378655)\n  - [Promise - JavaScript | MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\n  - [Using Promises - JavaScript | MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises)\n- [你好，JavaScript 异步编程---- 理解 JavaScript 异步的美妙](https://juejin.cn/post/6844903648162480142 https://juejin.cn/post/6844903648162480142)\n- [Promise 不会？？看这里！！！史上最通俗易懂的 Promise！！！](https://juejin.cn/post/6844903607968481287 https://juejin.cn/post/6844903607968481287)\n- [当 async/await 遇上 forEach](https://link.juejin.cn?target=https%3A%2F%2Fobjcer.com%2F2017%2F10%2F12%2Fasync-await-with-forEach%2F https://objcer.com/2017/10/12/async-await-with-forEach/)\n- [Promise 必知必会（十道题）](https://juejin.cn/post/6844903509934997511 https://juejin.cn/post/6844903509934997511)\n\n### Write a Promise\n\n- ⭐[Promises/A+](https://promisesaplus.com/)\n  - 🛠️[Conformant Promises/A+ Implementations](https://promisesaplus.com/implementations)\n  - 🛠️[Promises/A+ · GitHub](https://github.com/promises-aplus)\n- 🚀[手写 Promise：实现符合 Promises/A+规范的 Promise - 掘金](https://juejin.cn/post/7274887531271012388#heading-13)\n- 🚀[手写 Promise 核心代码 - JavaScript 前端 Web 工程师\\_哔哩哔哩\\_bilibili](https://www.bilibili.com/video/BV1RR4y1p7my/?vd_source=be278a4cfd00a5f72dcf153eaca79333)\n  - [手把手一行一行代码教你“手写 Promise“，完美通过 Promises/A+ 官方 872 个测试用例 - 掘金](https://juejin.cn/post/7043758954496655397#heading-14)\n- [Promise 实现原理（附源码）](https://juejin.cn/post/6844903665686282253 https://juejin.cn/post/6844903665686282253)\n- [100 行代码实现 Promises/A+ 规范](https://link.juejin.cn?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FqdJ0Xd8zTgtetFdlJL3P1g https://mp.weixin.qq.com/s/qdJ0Xd8zTgtetFdlJL3P1g)\n- [一起学习造轮子（一）：从零开始写一个符合 Promises/A+规范的 promise](https://juejin.cn/post/6844903617619558408#heading-34 https://juejin.cn/post/6844903617619558408#heading-34)\n- [BAT 前端经典面试问题：史上最最最详细的手写 Promise 教程](https://juejin.cn/post/6844903625769091079#heading-9 https://juejin.cn/post/6844903625769091079#heading-9)\n\n## What is a Promise?\n\n- A promise is a returned **object** to which you attach callbacks, instead of passing callbacks into a function.\n- It represents the eventual completion (or failure) of an asynchronous operation and its resulting value.\n- Promise 是一种处理异步代码（而不会陷入回调地狱）的方式。\n\n## Promise State & Result\n\n#### 3 种状态 (PromiseState)\n\n- **pending**: initial state, neither fulfilled nor rejected.\n- **fulfilled** (resolved): meaning that the operation was completed successfully.\n- **rejected**: meaning that the operation failed\n- ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/z-PromiseState-1.png) ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/z-PromiseState.png)\n\n#### 执行特点\n\n- Promise 只以`第一次为准`，第一次成功就`永久`为`fulfilled`，第一次失败就永远状态为`rejected`\n- Promise 中有 `throw` 的话，就相当于执行了`reject`\n\n```js\nlet p1 = new Promise((resolve, reject) => {\n\tresolve(成功);\n\treject(失败);\n});\nconsole.log(p1, p1);\n\nlet p2 = new Promise((resolve, reject) => {\n\treject(失败);\n\tresolve(成功);\n});\nconsole.log(p2, p2);\n\nlet p3 = new Promise((resolve, reject) => {\n\tthrow 报错;\n});\nconsole.log(p3, p3);\n```\n\n#### Pending State 特点\n\n- Promise 里没有执行`resolve`、`reject`以及`throw`的话，这个 promise 的状态也是`pending`\n- `pending`状态下的 promise 不会执行回调函数`then()`\n\n```js\nlet myPromise1 = new Promise(() => {});\nconsole.log(myPromise1 :>> , myPromise1);\nlet myPromise2 = new Promise((resolve, reject) => {\n\tlet a = 1;\n\tfor (let index = 0; index < 5; index++) {\n\t\ta++;\n\t}\n});\nconsole.log(myPromise2 :>> , myPromise2);\nmyPromise2.then(() => {\n\tconsole.log(myPromise2执行了then); // 在 Promise pending 状态下不会执行\n});\n```\n\n## Create a Promise\n\n### `new Promise()`\n\n#### 参数要求\n\n- 使用 `new Promise()` 必须输入一个执行函数，否则会报错\n\n```js\nlet myPromise0 = new Promise();\nconsole.log(myPromise0 :>> , myPromise0); // 报错：TypeError: Promise resolver undefined\n```\n\n##### Case\n\n```js\nfunction makeRequest(location) {\n\treturn new Promise((resolve, reject) => {\n\t\tconsole.log(`Making Request to ${location}`);\n\t\tif (location === Google) {\n\t\t\tresolve(Google says Hi);\n\t\t} else {\n\t\t\treject(We can only talk to Google);\n\t\t}\n\t});\n}\n```\n\n#### ⭐ 执行顺序\n\n- Promise 构造函数是同步执行的，`promise.then`  中的函数是异步执行的\n\n##### Case\n\n```js\nconst promise = new Promise((resolve, reject) => {\n\tconsole.log(1);\n\tresolve();\n\tconsole.log(2);\n});\npromise.then(() => {\n\tconsole.log(3);\n});\nconsole.log(4);\n```\n\n##### Output\n\n```shell\n1\n2\n4\n3\n```\n\n### `Promise.resolve()`\n\n将现有对象转为 Promise 对象\n\n```js\nPromise.resolve(foo);\n// 等价于\nnew Promise((resolve) => resolve(foo));\n```\n\n#### 参数的四种情况\n\n1. 如果参数是 `Promise` 实例\n   - 那么 `Promise.resolve()` 将不做任何修改、原封不动地返回这个实例。\n2. 参数是一个 thenable (具有`then`方法的对象) 对象\n   - 会将这个对象转为 `Promise` 对象，然后就立即执行 thenable 对象的 `then`方法\n3. 参数是一个原始值，或者是一个不具有`then`方法的对象\n   - 则`Promise.resolve`方法返回一个新的  `Promise`  对象，状态为`resolved`\n4. `Promise.resolve()`方法允许调用时不带参数\n   - 直接返回一个 `resolved`状态的 `Promise` 对象。\n\n#### Example\n\n```js\nconst tick = Date.now();\nconst log = (v) => console.log(`${v} \\n Elapsed: ${Date.now() - tick}ms`);\nconst codeBlocker = () => {\n\t// Blocking\n\t// let i = 0;\n\t// while(i < 1000000000) { i++;}\n\t// return '🐷 billion loops done';\n\n\t// Async blocking\n\t// return new Promise((resolve, reject) => {\n\t// let i = 0;\n\t// while(i < 1000000000) { i++;}\n\t// resolve('🐷 billion loops done');\n\t// })\n\n\t// Non-blocking\n\treturn Promise.resolve().then((v) => {\n\t\tlet i = 0;\n\t\twhile (i < 1000000000) {\n\t\t\ti++;\n\t\t}\n\t\treturn 🐷 billion loops done;\n\t});\n};\nlog(🥪 Synchronous 1);\ncodeBlocker().then(log);\nlog(🥪 Synchronous 2);\n```\n\n### `Promise.reject()`\n\n- `Promise.reject()`方法的参数，会原封不动地作为`reject`的理由，变成后续方法的参数\n\n```js\nconst thenable = {\n\tthen(resolve, reject) {\n\t\treject(出错了);\n\t},\n};\nPromise.reject(thenable).catch((e) => {\n\tconsole.log(e === thenable);\n});\n// true\n```\n\n## Consume Promise\n\n### `Promise.prototype.then()`\n\n接收两个回调函数作为参数，均为可选参数\n\n```js\nPromise.resolve().then(onFulfilled()=>{}, onReject()={})\n```\n\n### `Promise.prototype.catch()`\n\n#### 错误捕获条件\n\n❌ 在`then`或`catch`中 `return` 一个 `new Error` 对象不会被捕获：\n`return new Error(Error!)`\n✅ 必须使用以下任一一种语法：\n\n```js\nreturn Promise.reject(new Error(error!!!));\nthrow new Error(error!!!);\n```\n\n#### 级联错误\n\n- 如果在  `catch()`  内部引发错误，则可以附加第二个  `catch()`来处理，依此类推\n\n```js\nnew Promise((resolve, reject) => {\n\tthrow new Error(错误);\n})\n\t.catch((err) => {\n\t\tthrow new Error(错误);\n\t})\n\t.catch((err) => {\n\t\tconsole.error(err);\n\t});\n```\n\n### `Promise.prototype.finally()`\n\n- 用于指定不管 Promise 对象最后状态如何，都会执行的操作。该方法是 ES2018 引入标准的\n  - 避免了同样的语句需要在`then()`和`catch()`中各写一次的情况。\n\n### Example (Consume Promise )\n\n#### Example (Promise chain)\n\n```js\n// import fetch from node-fetch;\nconst promise = fetch(https://jsonplaceholder.typicode.com/todos/1);\npromise\n\t.then((res) => res.json())\n\t.then((todo) => {\n\t\tthrow new Error(uh oh);\n\t\treturn todo;\n\t})\n\t.then((todo) => console.log(😛, todo.title)) // This line will be bypasses\n\t.catch((err) => console.error(😭, err));\nconsole.log(🥪 Synchronous);\n```\n\n#### Example (Ice-cream Shop)\n\n- [[英字] JavaScript 异步编程（Async/Await、Promise、Callback）FreeCodeCamp](https://www.bilibili.com/video/BV1g44y1z7N3/?spm_id_from=333.788.recommend_more_video.4&vd_source=be278a4cfd00a5f72dcf153eaca79333)\n- [FreeCodeCamp-Blog](https://www.freecodecamp.org/news/javascript-async-await-tutorial-learn-callbacks-promises-async-await-by-making-icecream/)\n\n##### Relationship between time and work\n\n```javascript\nlet is_shop_open = true;\nlet order = (time, work) => {\n\treturn new Promise((resolve, reject) => {\n\t\tif (is_shop_open) {\n\t\t\tsetTimeout(() => {\n\t\t\t\t// work is 👇 getting done here\n\t\t\t\tresolve(work());\n\t\t\t\t// Setting 👇 time here for 1 work\n\t\t\t}, time);\n\t\t} else {\n\t\t\treject(console.log(Our shop is closed));\n\t\t}\n\t});\n};\n```\n\n##### Promise chaining\n\n```js\n// step 1\norder(2000, () => console.log(`${stocks.Fruits[0]} was selected`))\n\t// step 2\n\t.then(() => order(0000, () => console.log(production has started)))\n\t// step 3\n\t.then(() => {\n\t\treturn order(2000, () => console.log(Fruit has been chopped));\n\t})\n\t// step 4\n\t.then(() => {\n\t\treturn order(1000, () =>\n\t\t\tconsole.log(`${stocks.liquid[0]} and ${stocks.liquid[1]} added`)\n\t\t);\n\t})\n\t// step 5\n\t.then(() => {\n\t\treturn order(1000, () => console.log(start the machine));\n\t})\n\t// step 6\n\t.then(() => {\n\t\treturn order(2000, () =>\n\t\t\tconsole.log(`ice cream placed on ${stocks.holder[1]}`)\n\t\t);\n\t})\n\t// step 7\n\t.then(() => {\n\t\treturn order(3000, () => console.log(`${stocks.toppings[0]} as toppings`));\n\t})\n\t// Step 8\n\t.then(() => {\n\t\treturn order(2000, () => console.log(Serve Ice Cream));\n\t});\n```\n\n##### Error handling\n\n```javascript\nlet is_shop_open = false;\n// Add Error handling at the end of the Promise chain\n.catch(()=>{\n  console.log(Customer left)\n})\n// Output:\n// Our shop is closed -- from reject\n// Customer left -- from catch\n```\n\n##### The `.finally` handler\n\nThe `finally` handler which works regardless of whether our promise was resolved or rejected.\n\n```javascript\n// Whether we serve no customers or 100 customers, our shop will close at the end of the day. Optional - Add `finally` at the very bottom of the chain\n.finally(()=>{\n  console.log(end of day)\n})\n```\n\n#### Avoid Mistakes\n\n```js\ndoSomething()\n\t.then(function (result) {\n\t\t// If using a full function expression: return the promise\n\t\treturn doSomethingElse(result);\n\t})\n\t// If using arrow functions: omit the braces and implicitly return the result\n\t.then((newResult) => doThirdThing(newResult))\n\t// Even if the previous chained promise returns a result, the next one\n\t// doesn't necessarily have to use it. You can pass a handler that doesn't\n\t// consume any result.\n\t.then((/* result ignored */) => doFourthThing())\n\t// Always end the promise chain with a catch handler to avoid any\n\t// unhandled rejections!\n\t.catch((error) => console.error(error));\n```\n\n## More Promise Method (更多 Promise 对象方法)\n\n### `Promise.all()`\n\n- 发起多个并发请求，然后在所有 promise 都被解决后执行一些操作\n- 适合彼此相互依赖或者在其中任何一个`reject`时立即结束\n\n```js\nconst promise1 = Promise.resolve(3);\nconst promise2 = 42;\nconst promise3 = new Promise((resolve, reject) => {\n\tsetTimeout(resolve, 100, foo);\n});\nPromise.all([promise1, promise2, promise3]).then((values) => {\n\tconsole.log(values);\n});\n// expected output: Array [3, 42, foo]\n```\n\n### `Promise.race()`\n\n- 传入多个 promise 实例，谁跑的快，就以谁的结果执行回调\n\n```js\nconst first = new Promise((resolve, reject) => {\n\tsetTimeout(resolve, 500, 第一个);\n});\nconst second = new Promise((resolve, reject) => {\n\tsetTimeout(resolve, 100, 第二个);\n});\nPromise.race([first, second]).then((result) => {\n\tconsole.log(result); // 第二个\n});\n```\n\n#### Use Case\n\n1、把异步操作和定时器放到一起，如果定时器先触发，认为超时，告知用户\n\n```js\nfunction timeOut(time) {\n\tlet result = new Promise((resolve, reject) => {\n\t\tsetTimeout(() => {\n\t\t\tresolve(请求超时);\n\t\t}, time); // 为了验证方法，可以把时间设小点\n\t});\n\treturn result;\n}\nPromise.race([timeOut(200), fetch(https://api.github.com/users/ruanyf)]).then(\n\t(res) => {\n\t\tconsole.log(res);\n\t}\n);\n```\n\n2、如果图片等资源有多个存放路径，但是不确定哪个路径的资源更快，可以用该方法同时请求多个路径，哪个路径的资源最先拿到，使用哪个资源\n\n3、如果指定时间内没有获得结果，就将 Promise 的状态变为 `reject`，否则变为`resolve`\n\n```js\nconst p = Promise.race([\n\tfetch(/resource-that-may-take-a-while),\n\tnew Promise(function (resolve, reject) {\n\t\tsetTimeout(() => reject(new Error(request timeout)), 5000);\n\t}),\n]);\np.then(console.log).catch(console.error);\n```\n\n### `Promise.allSettled()` (ES2020)\n\n- 由 ES2020 引入\n- 功能\n  - 有多个彼此不依赖的异步任务成功完成时，或者您总是想知道每个 promise 的结果时，通常使用\n  - `Promise.all()`无法确定所有请求都结束。想要达到这个目的，写起来很麻烦，有了`Promise.allSettled()`，这就很容易了\n\n```js\nconst urls = [\n\t/* ... */\n];\nconst requests = urls.map((x) => fetch(x));\ntry {\n\tawait Promise.all(requests);\n\tconsole.log(所有请求都成功。);\n} catch {\n\tconsole.log(至少一个请求失败，其他请求可能还没结束。);\n}\n```\n\n#### 返回值\n\n- 返回一个在所有给定的 promise 都已经`fulfilled`或`rejected`后的 promise，并带有一个**对象数组**，每个对象表示对应的 promise 结果\n  - ![](https://cdn.jsdelivr.net/gh/jenniferwonder/bimg/programming/z-Promise.allSettled.png)\n- 每个对象都有`status`属性，该属性的值只可能是字符串`fulfilled`或字符串`rejected`。\n  - `fulfilled`时，对象有`value`属性，\n  - `rejected`时有`reason`属性，对应两种状态的返回值。\n\n```js\nconst promises = [fetch(index.html), fetch(https://does-not-exist/)];\nconst results = await Promise.allSettled(promises);\n// 过滤出成功的请求\nconst successfulPromises = results.filter((p) => p.status === fulfilled);\n// 过滤出失败的请求，并输出原因\nconst errors = results\n\t.filter((p) => p.status === rejected)\n\t.map((p) => p.reason);\n```\n\n### `Promise.any()` (ES2020)\n\n- 输入\n  - 一个 Promise 数组\n- 返回值\n  - 一个新的 Promise 对象\n    - 该 Promise 对象在传入的 Promise 数组中的任何一个 Promise 解决时就会被解决\n    - 若所有的 Promise 都被拒绝，则返回的 Promise 会被拒绝，并且它的拒因是一个 `AggregateError` 对象实例，包含了所有被拒绝的 Promise 的原因 (可通过 `.errors` 属性读取)\n- 返回值处理\n\n```js\nPromise.any([p10, p11])\n\t.then((res) => console.log(res))\n\t.catch((err) => {\n\t\tif (err instanceof AggregateError) {\n\t\t\tconsole.error(AggregateError occurred:);\n\t\t\tconsole.log(err.errors);\n\t\t\terr.errors.forEach((err, index) => {\n\t\t\t\tconsole.error(`Error ${index + 1}:`, err);\n\t\t\t});\n\t\t} else {\n\t\t\tconsole.error(Other error occurred:, err);\n\t\t}\n\t});\n```\n"}function compiledContent(){return html}function getHeadings(){return[{depth:1,slug:"promise",text:"Promise#"},{depth:2,slug:"reference",text:"Reference#"},{depth:3,slug:"write-a-promise",text:"Write a Promise#"},{depth:2,slug:"what-is-a-promise",text:"What is a Promise?#"},{depth:2,slug:"promise-state--result",text:"Promise State & Result#"},{depth:4,slug:"3-种状态-promisestate",text:"3 种状态 (PromiseState)#"},{depth:4,slug:"执行特点",text:"执行特点#"},{depth:4,slug:"pending-state-特点",text:"Pending State 特点#"},{depth:2,slug:"create-a-promise",text:"Create a Promise#"},{depth:3,slug:"new-promise",text:"new Promise()#"},{depth:4,slug:"参数要求",text:"参数要求#"},{depth:5,slug:"case",text:"Case#"},{depth:4,slug:"-执行顺序",text:"⭐ 执行顺序#"},{depth:5,slug:"case-1",text:"Case#"},{depth:5,slug:"output",text:"Output#"},{depth:3,slug:"promiseresolve",text:"Promise.resolve()#"},{depth:4,slug:"参数的四种情况",text:"参数的四种情况#"},{depth:4,slug:"example",text:"Example#"},{depth:3,slug:"promisereject",text:"Promise.reject()#"},{depth:2,slug:"consume-promise",text:"Consume Promise#"},{depth:3,slug:"promiseprototypethen",text:"Promise.prototype.then()#"},{depth:3,slug:"promiseprototypecatch",text:"Promise.prototype.catch()#"},{depth:4,slug:"错误捕获条件",text:"错误捕获条件#"},{depth:4,slug:"级联错误",text:"级联错误#"},{depth:3,slug:"promiseprototypefinally",text:"Promise.prototype.finally()#"},{depth:3,slug:"example-consume-promise-",text:"Example (Consume Promise )#"},{depth:4,slug:"example-promise-chain",text:"Example (Promise chain)#"},{depth:4,slug:"example-ice-cream-shop",text:"Example (Ice-cream Shop)#"},{depth:5,slug:"relationship-between-time-and-work",text:"Relationship between time and work#"},{depth:5,slug:"promise-chaining",text:"Promise chaining#"},{depth:5,slug:"error-handling",text:"Error handling#"},{depth:5,slug:"thefinallyhandler",text:"The .finally handler#"},{depth:4,slug:"avoid-mistakes",text:"Avoid Mistakes#"},{depth:2,slug:"more-promise-method-更多-promise-对象方法",text:"More Promise Method (更多 Promise 对象方法)#"},{depth:3,slug:"promiseall",text:"Promise.all()#"},{depth:3,slug:"promiserace",text:"Promise.race()#"},{depth:4,slug:"use-case",text:"Use Case#"},{depth:3,slug:"promiseallsettled-es2020",text:"Promise.allSettled() (ES2020)#"},{depth:4,slug:"返回值",text:"返回值#"},{depth:3,slug:"promiseany-es2020",text:"Promise.any() (ES2020)#"}]}const Content=createComponent(((s,n,e)=>{const{layout:o,...a}=frontmatter;return a.file=file,a.url=url,renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`})),promise=Object.freeze(Object.defineProperty({__proto__:null,Content:Content,compiledContent:compiledContent,default:Content,file:file,frontmatter:frontmatter,getHeadings:getHeadings,rawContent:rawContent,url:url},Symbol.toStringTag,{value:"Module"}));export{_internal,body,collection,data,id,promise,slug};